<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
	<!-- Throttle, authorize, validate, cache, or transform the requests -->
	<inbound>
		<base />
		<cache-lookup-value caching-type="internal" key="@("bearerToken")" variable-name="bearerToken" />
		<choose>
			<when condition="@(!context.Variables.ContainsKey("bearerToken"))">
				<send-request ignore-error="true" timeout="20" response-variable-name="accessTokenResult" mode="new">
					<set-url>https://login.microsoftonline.com/ce37ee93-618b-49d7-8691-a5b88f9eb5e2/oauth2/v2.0/token</set-url>
					<set-method>POST</set-method>
					<set-header name="Content-Type" exists-action="override">
						<value>application/x-www-form-urlencoded</value>
					</set-header>
					<set-body>@("client_id={{oauth-clientId}}&scope={{oauth-scope}}&client_secret={{oauth-clientSecret}}&grant_type=client_credentials")</set-body>
				</send-request>
				<set-variable name="accessToken" value="@(((IResponse)context.Variables["accessTokenResult"]).Body.As<JObject>())" />
				<set-variable name="bearerToken" value="@((string)((JObject)context.Variables["accessToken"])["access_token"])" />
				<!--<set-variable name="tokenDurationSeconds" value="@((int)((JObject)context.Variables["accessToken"])["expires_in"])" />-->
				<set-variable name="tokenDurationSeconds" value="60" />
				<cache-store-value caching-type="internal" key="bearerToken" value="@((string)context.Variables["bearerToken"])" duration="60" />
			</when>
		</choose>
		<set-header name="Authorization" exists-action="override">
			<value>@("Bearer " + (string)context.Variables["bearerToken"])</value>
		</set-header>
	</inbound>
	<!-- Control if and how the requests are forwarded to services  -->
	<backend>
		<base />
	</backend>
	<!-- Customize the responses -->
	<outbound>
		<base />
	</outbound>
	<!-- Handle exceptions and customize error responses  -->
	<on-error>
		<base />
	</on-error>
</policies>