<fragment>
	<choose>
		<!-- Check for ApiKey Authentication -->
		<when condition="@((string)context.Variables["targetauth"] == "apikey")">
			<set-header name="apikey" exists-action="override">
				<value>@((string)context.Variables["target-apikey"])</value>
			</set-header>
		</when>
		<!-- Set Bearer Token (OAuth/JWT) -->
		<when condition="@( (string)context.Variables["targetauth"] == "oauth" )">
			<cache-lookup-value caching-type="internal" key="@($"{context.Api.Name}-bearerToken")" variable-name="bearerToken" />
			<choose>
				<when condition="@(!context.Variables.ContainsKey("bearerToken"))">
					<send-request ignore-error="true" timeout="20" response-variable-name="accessTokenResult" mode="new">
						<set-url>@((string)context.Variables["target-oauth-host"] + (string)context.Variables["target-oauth-path"])</set-url>
						<set-method>@((string)context.Variables["target-oauth-method"])</set-method>
						<set-header name="Content-Type" exists-action="override">
							<value>application/x-www-form-urlencoded</value>
						</set-header>
						<set-body>@(
                                "client_id=" + (string)context.Variables["target-oauth-client-id"] +
                                "&scope=" + (string)context.Variables["target-oauth-scope"] +
                                "&client_secret=" + (string)context.Variables["target-oauth-client-secret"] +
                                "&grant_type=" + (string)context.Variables["target-oauth-grant-type"] +
                                "&username=" + (string)context.Variables["target-oauth-username"] +
                                "&password=" + (string)context.Variables["target-oauth-password"]
                                )
                            </set-body>
					</send-request>
					<set-variable name="accessToken" value="@(((IResponse)context.Variables["accessTokenResult"]).Body.As<JObject>())" />
					<set-variable name="bearerToken" value="@((string)((JObject)context.Variables["accessToken"])["access_token"])" />
					<set-variable name="tokenDurationSeconds" value="@((int)((JObject)context.Variables["accessToken"])["expires_in"])" />
					<cache-store-value caching-type="internal" key="@($"{context.Api.Name}-bearerToken")" value="@((string)context.Variables["bearerToken"])" duration="@((int)context.Variables["tokenDurationSeconds"])" />
				</when>
			</choose>
			<set-header name="Authorization" exists-action="override">
				<value>@("Bearer " + (string)context.Variables["bearerToken"])</value>
			</set-header>
		</when>
		<!-- Set Basic Authentication -->
		<when condition="@((string)context.Variables["targetauth"] == "basicauth")">
			<authentication-basic username="@((string)context.Variables["target-basicauth-username"])" password="@((string)context.Variables["target-basicauth-password"])" />
		</when>
		<!-- Prepare HMAC Signature and set in Header X-Signature-->
		<when condition="@((string)context.Variables["targetauth"] == "hmac")">
			<!-- Configuration -->
			<set-variable name="secretKey" value="@((string)context.Variables["hmac-secret-key"])" />
			<set-variable name="stringToSign" value="@{
                return (string)context.Variables["requestBody"];
            }" />
			<!-- Generate HMAC SHA256 signature -->
			<set-variable name="computedSignature" value="@{
                var secretBytes = System.Text.Encoding.UTF8.GetBytes((string)context.Variables["secretKey"]);
                var payloadBytes = System.Text.Encoding.UTF8.GetBytes((string)context.Variables["stringToSign"]);
                using (var hmac = new System.Security.Cryptography.HMACSHA256(secretBytes))
                {
                    var hash = hmac.ComputeHash(payloadBytes);
                    return System.Convert.ToBase64String(hash);
                }
            }" />
			<set-header name="X-Signature" exists-action="override">
				<value>@((string)context.Variables["computedSignature"])</value>
			</set-header>
		</when>
	</choose>
</fragment>